// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using thema12.Models;

#nullable disable

namespace thema12.Data
{
    public partial class Sami1Context : DbContext
    {
        public Sami1Context()
        {
        }

        public Sami1Context(DbContextOptions<Sami1Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Deadline> Deadlines { get; set; }
        public virtual DbSet<DeadlineStatus> DeadlineStatuses { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskStatus> TaskStatuses { get; set; }
        public virtual DbSet<vTaskList> vTaskLists { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => e.Account_ID);

                entity.ToTable("Account");

                entity.Property(e => e.Account_ID).HasColumnName("Account ID");

                entity.Property(e => e.E_mail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("E-mail");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Deadline>(entity =>
            {
                entity.HasKey(e => e.Deadline_ID);

                entity.ToTable("Deadline");

                entity.HasIndex(e => e.Task_ID, "IX_Deadline_taskid")
                    .IsUnique();

                entity.Property(e => e.Deadline_ID).HasColumnName("Deadline ID");

                entity.Property(e => e.Deadline1)
                    .HasColumnType("datetime")
                    .HasColumnName("Deadline");

                entity.Property(e => e.Reminders).HasColumnType("datetime");

                entity.Property(e => e.Task_ID).HasColumnName("Task ID");

                entity.HasOne(d => d.DeadlineStatus)
                    .WithMany(p => p.Deadlines)
                    .HasForeignKey(d => d.DeadlineStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Deadline_DeadlineStatus");

                entity.HasOne(d => d.Task)
                    .WithOne(p => p.Deadline)
                    .HasForeignKey<Deadline>(d => d.Task_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Deadline_Task");
            });

            modelBuilder.Entity<DeadlineStatus>(entity =>
            {
                entity.ToTable("DeadlineStatus");

                entity.Property(e => e.DeadlineStatusID).ValueGeneratedNever();

                entity.Property(e => e.DeadlineStatusName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Task>(entity =>
            {
                entity.HasKey(e => e.Task_ID);

                entity.ToTable("Task");

                entity.Property(e => e.Task_ID).HasColumnName("Task ID");

                entity.Property(e => e.Account_ID).HasColumnName("Account ID");

                entity.Property(e => e.Task_Name).IsRequired();

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.Account_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Task_Account");

                entity.HasOne(d => d.Blocker_Task)
                    .WithMany(p => p.InverseBlocker_Task)
                    .HasForeignKey(d => d.Blocker_Task_ID)
                    .HasConstraintName("FK_Task_Task");

                entity.HasOne(d => d.TaskStatus)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.TaskStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Task_TaskStatus");
            });

            modelBuilder.Entity<TaskStatus>(entity =>
            {
                entity.ToTable("TaskStatus");

                entity.Property(e => e.TaskStatusID).ValueGeneratedNever();

                entity.Property(e => e.TaskStatusName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<vTaskList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vTaskList");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TaskStatusName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Task_ID).HasColumnName("Task ID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}